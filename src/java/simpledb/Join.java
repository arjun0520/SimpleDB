package simpledb;

import simpledb.OpIterator;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    JoinPredicate jp;
    OpIterator childItr1;
    OpIterator childItr2;
    //Like in OrderBy, create a global arrayList to return and an iterator of tuples
    ArrayList<Tuple> tups;
    Iterator<Tuple> tupItr;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.jp = p;
        this.childItr1 = child1;
        this.childItr2 = child2;
        this.tups = new ArrayList<Tuple>();
    }

    public JoinPredicate getJoinPredicate() {
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc td1 = childItr1.getTupleDesc();
        int field1 = jp.getField1();
        String fieldName1 = td1.getFieldName(field1);
        return fieldName1;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc td2 = childItr2.getTupleDesc();
        int field2 = jp.getField2();
        String fieldName2 = td2.getFieldName(field2);
        return fieldName2;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        //take td1 and td2 to create tdNew using TupleDesc merge()
        return TupleDesc.merge(this.childItr1.getTupleDesc(), this.childItr2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        childItr1.open();
        childItr2.open();
    }

    public void close() {
        super.close();
        childItr1.close();
        childItr2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        childItr1.rewind();
        childItr2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        //Store tuples in array before can use nested for-loops
        ArrayList<Tuple> tpls1 = new ArrayList<Tuple>();
        ArrayList<Tuple> tpls2 = new ArrayList<Tuple>();
        //iterate over tuples and fill arrays
        while(childItr1.hasNext()){
            tpls1.add(childItr1.next());
        }
        while(childItr2.hasNext()){
            tpls2.add(childItr2.next());
        }
        //now use for-each psuedo-code
        for (Tuple t: tpls1) {
            for (Tuple t2: tpls2) {
                if(jp.filter(t, t2)){
                    //to combine the tuples we need to get tupleDesc
                    TupleDesc td = this.getTupleDesc();
                    //make a new Tuple with td
                    Tuple newTup = new Tuple(td);
                    //need to setField(index, field) for newTup using first og tuple
                    for(int i = 0; i < t.getTupleDesc().numFields(); i++){
                        newTup.setField(i, t.getField(i));
                    }
                    int limit = t.getTupleDesc().numFields() + t2.getTupleDesc().numFields();
                    //need to do the same for the second og tuple
                    int buffer = 0;
                    for(int i = t.getTupleDesc().numFields(); i < limit; i++){
                        newTup.setField(i, t2.getField(buffer++));
                    }
                    //put the new tuple into the global arrayList so can use tupItr to output the tuples
                    tups.add(newTup);
                }
            }
            tupItr = tups.iterator();
        }
        //using a while loop will give an infinite loop, use if instead
        if(tupItr.hasNext()){
            return tupItr.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        //For join operators, the order of the children is not important. But they should be consistent
        //among multiple calls.
        return new OpIterator[] {this.childItr1, this.childItr2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.childItr1 = children[0];
        this.childItr2 = children[1];
    }

}
