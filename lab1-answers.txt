1. What Lab1 Was About:
(components and how they work)
The big player classes are HeapFile, BufferPool, and SeqScan. The other classes we wrote code in are more like helper classes, classes that maps different components together, parts of the car that make the car a car. In Catalog, a catalog holds a table and the schema for that table. A single map can't point to all of those things which is why we have multiple concurrentHashMaps that map the tables together. This allows us to call catalog via bufferPool and access specific components. BufferPool gives us access across class boundaries with the help of Catalog. HeapFile gives us access to DbFiles/HeapPages (but each DbFile only has access to one HeapFile). SeqScan executes the iterator in HeapFile and allows us to get and process the actual tuples.
I know this a very high-level explanation of my understanding. I have my entire internal monologue typed out from working on this lab (its how I work through problems, especially with coding) that entails all of my decisions and most of the errors leading up to those decisions. Its definitely longer than 2 pages though. \

2. Describe Design Decisions:
By design decisions I assume you mean data structures, extra classes, etc. If I'm wrong please let me know. I chose to use a concurrentHashMap for the bufferPool mostly because that was mentioned in an Ed post. Similarly, I wrote an internal class in HeapFile for my HeapFileIterator because I was stuck and posted on Ed where a TA told me to create a helper class. I chose to make it an internal class rather than adding it to simpleDb because it will only be used in HeapFile. I created a boolean variable, 'opened', which I use in SeqScan and HeapFileIterator because it allows me to handle next() and .next(). I found this out after failing tests and once I looked at the actual tests I was failing, they were trying to assert opened or not.\
\
3. Give one example of a unit test to improve existing tests:\
I can't think of any tests that would have made this more helpful. I felt that the tests were pretty straightforward. I found that when I was debugging print statements sometimes helped me fix my issues. If a print statement didn't work I would just follow the stack trace. \
\
4. Changes made to the API:\
I did not make any changes to the API.\
\
5. Describe any missing or incomplete elements of your code:\
I used two late days on this assignment because I spent way too much time trying to understand the earlier parts of the lab that I never noticed how code intensive the HeapIterator would be. I tend to look at what I'm working on and what I have finished and forget to look ahead. I spent all day today debugging and trying to fix my HeapFileIterator. I finally got all the HeapFileReadTests to pass but after I tried running the SystemsTests I failed two tests. I tried debugging those and keep coming back to HeapFileIterator. I will be going to office hours on Monday to fix this. I'm hoping that its something small and that I've just been at the computer for too long.\
\
6. Advice:\
Let me preface this by saying that I suffer from severe Anxiety and ADHD so I struggle with coding (a lot) because I can't keep track of my thoughts and am constantly lost in the code. I need directions to be very black and white, highly detailed, straight to the point bullet points rather than sentences with extra words that will only confuse me. I know that it is unlikely for directions to be done this way, but there were a couple JavaDocs where the instructions were misleading. For example, in SeqScan the comments for reset()  say "Reset the tableId, and tableAlias of this operator." To me, 'reset' means turn it back to zero (or null). Yet we're passing in parameters, and passing in parameters tells me that we are 'changing' or 'setting' something. Wording like this stops me in my tracks and I hyper-fixate  on what the actual meaning might me. I know this is my problem and not yours. I'm just asking that when writing the comments/spec if you could try to be as precise and selective with your word choice as possible, that would be wonderful.}